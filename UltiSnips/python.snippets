# main snippet, it fills a working main.py file
# It also supports slash commands
snippet dpy.main
import json, os, discord
from discord.ext import commands
from discord_slash import SlashCommand

# Get configuration.json
with open("configuration.json",'r') as config:
	data = json.load(config)
	#insert decryption algorithm here
	token = data['token']
	prefix = data['prefix']

# Loading base Intents
intents = discord.Intents.default()
# Creating the bot
bot = commands.Bot(orefix, intents=intents)
slash = SlashCommand(bot, sync_commands=True, sync_on_cog_reload=True)

# Loading Cogs
if __name__ == "__main__":
	for filename in os.listdir("Cogs"):
		if filename.endswith(".py"):
			bot.load_extension(f"Cogs.{filename[:-3]}")
	print("Cogs loaded")

@bot.event
async def on_ready():
	print(f"We have logged in as {bot.user}")
	print(discord.__version__)
	await bot.change_presence(
		activity=discord.Activity(type=discord.ActivityType.playing,
								name="How to cuddle your pet kraken"))

bot.run(token)								
endsnippet


# Snippet to create a Cog in discord.py
snippet dpy.cog
import discord
from discord.ext import commands


class $1(commands.Cog):

	def __init__(self, bot: commands.Bot) -> None:
		self._bot = bot


def setup(bot: commands.Bot) -> None:
	bot.add_cog($1(bot))
endsnippet

# Snippet to create a basic standard command
snippet dpy.cmd
@commands.command(name="$1")
async def $2(self, ctx: commands.Context) -> None:
	await ctx.send(content="template command")
endsnippet

# Another snippet for standard commands, but evolved ones
snippet dpy.cmd+
@commands.command(
	name="$1",
	aliases=["$2"],
	usage="$3",
	description="$4")
@commands.guild_only($5)
@commands.has_permissions($6)
@commands.bot_has_permissions($7)
async def $8(self, ctx: commands.Context) -> None:
	await ctx.send(content="template command")
endsnippet

# A bit of slash subcommands, for the flavor of sorting them
snippet dpy.slashsubcmd
@cog_ext.cog_subcommand(
	base="${1:cat}",
	name="${2:summoner}",
	description="${3:A command to summon a bit of kittens}",
	guild_ids=[$4],
	options=[{
		"name":"${5:cats}",
		"description":"${6:the number of cats to summon}",
		"type":${7:4},
		"required":${8:True}
	}])
async def ${9:cat_seller}(self, ctx: SlashContext, ${5:cats}: int) -> None:
	if not 0 <= cats < 200:
		return
	tmp: str = ":cat: " * cats
	await ctx.send(
		hidden=False,
		content=f"{ctx.author.mention}, here are your cats.\n{tmp}"
	)
endsnippet

# Snippet to
snippet dpy.embed
await ctx.send(embed=discord.Embed(
	title="${1:title}",
	color=${2:0x2f3136},
	description="${3:meow}"))
endsnippet

# a bit of error handler
snippet dpy.onCmdError
@commands.Cog.listener(name="on_command_error")
async def on_cmd_error(self, ctx: commands.Context,
						error: commands.CommandError) -> None:
	print("You may have a problem")
	$1
endsnippet

snippet dpy.help
import discord
from discord.ext import commands
from random import randint

class HelpCog(commands.Cog, name="help command"):
	def __init__(self, bot:commands.Bot):
		self.bot = bot

	@commands.command(name = 'help',
					usage="(commandName)",
					description = "Display the help message.",
					aliases = ['h', '?'])
	@commands.cooldown(1, 2, commands.BucketType.member)
	async def help (self, ctx, commandName:str=None):

		commandName2 = None
		stop = False

		if commandName is not None:
			for i in self.bot.commands:
				if i.name == commandName.lower():
					commandName2 = i
					break 
				else:
					for j in i.aliases:
						if j == commandName.lower():
							commandName2 = i
							stop = True
							break
						if stop is True:
							break 

			if commandName2 is None:
				await ctx.channel.send("No command found!")   
			else:
				embed = discord.Embed(title=f"{commandName2.name.upper()} Command", description="", color=randint(0, 0xffffff))
				embed.set_thumbnail(url=f'{self.bot.user.avatar_url}')
				embed.add_field(name=f"Name", value=f"{commandName2.name}", inline=False)
				aliases = commandName2.aliases
				aliasList = ""
				if len(aliases) > 0:
					for alias in aliases:
						aliasList += alias + ", "
					aliasList = aliasList[:-2]
					embed.add_field(name=f"Aliases", value=aliasList)
				else:
					embed.add_field(name=f"Aliases", value="None", inline=False)

				if commandName2.usage is None:
					embed.add_field(name=f"Usage", value=f"None", inline=False)
				else:
					embed.add_field(name=f"Usage", value=f"{self.bot.command_prefix}{commandName2.name} {commandName2.usage}", inline=False)
				embed.add_field(name=f"Description", value=f"{commandName2.description}", inline=False)
				await ctx.channel.send(embed=embed)             
		else:
			embed = discord.Embed(title=f"Help page", description=f"{self.bot.command_prefix}help (commandName), display the help list or the help data for a specific command.", color=randint(0, 0xffffff))
			embed.set_thumbnail(url=f'{self.bot.user.avatar_url}')
			for i in self.bot.commands:
				embed.add_field(name=i.name, value=i.description, inline=False)
			await ctx.channel.send(embed=embed)

def setup(bot:commands.Bot):
	bot.remove_command("help")
	bot.add_cog(HelpCog(bot))
endsnippet
