# main snippet, it fills a working main.py file
# It also supports slash commands
snippet dpy.main
import json, os, discord
from discord.ext import commands
from discord_slash import SlashCommand

# Get configuration.json
with open("configuration.json",'r') as config:
	data = json.load(config)
	#insert decryption algorithm here
	token = data['token']
	prefix = data['prefix']

# Loading base Intents
intents = discord.Intents.default()
# Creating the bot
bot = commands.Bot(orefix, intents=intents)
slash = SlashCommand(bot, sync_commands=True, sync_on_cog_reload=True)

# Loading Cogs
if __name__ == "__main__":
	for filename in os.listdir("Cogs"):
		if filename.endswith(".py"):
			bot.load_extension(f"Cogs.{filename[:-3]}")
	print("Cogs loaded")

@bot.event
async def on_ready():
	print(f"We have logged in as {bot.user}")
	print(discord.__version__)
	await bot.change_presence(
		activity=discord.Activity(type=discord.ActivityType.playing,
								name="How to cuddle your pet kraken"))

bot.run(token)								
endsnippet


# Snippet to create a Cog in discord.py
snippet dpy.cog
import discord
from discord.ext import commands


class $1(commands.Cog):

	def __init__(self, bot: commands.Bot) -> None:
		self._bot = bot


def setup(bot: commands.Bot) -> None:
	bot.add_cog($1(bot))
endsnippet

# Snippet to create a basic standard command
snippet dpy.cmd
@commands.command(name="$1")
async def $2(self, ctx: commands.Context) -> None:
	await ctx.send(content="template command")
endsnippet

# Another snippet for standard commands, but evolved ones
snippet dpy.cmd+
@commands.command(
	name="$1",
	aliases=["$2"],
	usage="$3",
	description="$4")
@commands.guild_only($5)
@commands.has_permissions($6)
@commands.bot_has_permissions($7)
async def $8(self, ctx: commands.Context) -> None:
	await ctx.send(content="template command")
endsnippet

# A bit of slash subcommands, for the flavor of sorting them
snippet dpy.slashsubcmd
@cog_ext.cog_subcommand(
	base="${1:cat}",
	name="${2:summoner}",
	description="${3:A command to summon a bit of kittens}",
	guild_ids=[$4],
	options=[{
		"name":"${5:cats}",
		"description":"${6:the number of cats to summon}",
		"type":${7:4},
		"required":${8:True}
	}])
async def ${9:cat_seller}(self, ctx: SlashContext, ${5:cats}: int) -> None:
	if not 0 <= cats < 200:
		return
	tmp: str = ":cat: " * cats
	await ctx.send(
		hidden=False,
		content=f"{ctx.author.mention}, here are your cats.\n{tmp}"
	)
endsnippet

# Snippet to
snippet dpy.embed
await ctx.send(embed=discord.Embed(
	name="${1:name}",
	title="${2:title}",
	color=${3:0x2f3136},
	description="${4:meow}"))
endsnippet
